Уровни изоляции на основе управления версиями строк позволяют уменьшить число блокировок, устанавливаемых в ходе транзакции, устраняя необходимость использования разделяемых блокировок при операциях чтения. Это увеличивает производительность системы путем сокращения объема ресурсов, используемых для управления блокировками. Производительность также увеличивается снижением количества блокировок транзакции со стороны других транзакций.

Уровни изоляции на основе управления версиями строк увеличивают ресурсы, требуемые для изменения данных. Включение этих параметров приводит к включению управления версиями для всех изменений базы данных. Копия данных перед изменением сохраняется в базе данных tempdb даже в том случае, когда не имеется активных транзакций, использующих изоляцию на основе управления версиями строк.

-- Основное
	- В версионнике работают только 2 уровня изоляции: READ COMMITED SNAPSHOT (классика ORACLE) и SNAPSHOT (Serializable Oracle)
	- Если на БД включена версионность, а мы пытается использовать классические уровни изоляции, то для этой сессий система начнёт работать без версионности
	- Версионностью мы спасаемся только от конфликтов читателя и писателя
	- update conflict страшен внутри SET TRANSACTION ISOLATION LEVEL SNAPSHOT
	
-- ОЧЕНЬ ВАЖНО
	Для каждой строки базы данных доступно до 14 байт в конце строки для хранения сведений об управлении версиями. Сведения для управления версиями строк содержат последовательный номер транзакции, зафиксировавшей версию, а также указатель на строку этой версии. Эти 14 байт добавляются при первом изменении строки либо при вставке новой строки, если выполняется любое из следующих условий:
	Параметры READ_COMMITTED_SNAPSHOT или ALLOW_SNAPSHOT_ISOLATION установлены в ON.
		- В таблице имеется триггер.
		- Используется режим MARS.
		- В данный момент в таблице выполняются фоновые операции построения индекса.
	Данные 14 байт удаляются из строки базы данных при первом изменении строки, если выполняется каждое из следующих условий:
		- Параметры READ_COMMITTED_SNAPSHOT и ALLOW_SNAPSHOT_ISOLATION установлены в OFF.
		- В таблице больше не существует триггера.
		- Режим MARS больше не используется.
		- Фоновые операции построения индекса в данный момент не выполняются.

-- Позволяет определить самых крупных потребителей в хранилище версий
	-- Может быть очень затратным
	SELECT * FROM sys.dm_tran_top_version_generators;
	
-- Разница READ_COMMITTED_SNAPSHOT и ALLOW_SNAPSHOT_ISOLATION
	- Если включить READ_COMMITTED_SNAPSHOT, то будет работать версионность и результат, даже внутри транзакции, будет показывать на момент исполнения инстркции (закомиченные данные)
	- Если влючить ALLOW_SNAPSHOT_ISOLATION и написать SET TRANSACTION ISOLATION LEVEL SNAPSHOT, то все данные внутри транзации будут показываться на момент старта транзакции
	- В 
	
	/*
	В общем там всё немного запутанно, меня всегда бесила эта тема в SQL Server.

	Когда включаешь READ_COMMITTED_SNAPSHOT, то БД начинает работать в версионном режиме и всё что я писал выше активируется. По-умолчанию все операции будут выполняться именно в этом режиме. Так же данные будут возвращаться на НАЧАЛО ВЫПОЛНЕНИЯ ИНСТРУКЦИИ

	Когда включаешь ALLOW_SNAPSHOT_ISOLATION НИЧЕГО НЕ происходит, кроме возможности в коде РУКАМИ вызвать SET TRANSACTION ISOLATION LEVEL SNAPSHOT, что изменит только ОДНО поведение - данные будут возвращаться не на начало инструкции, а на начало транзакции
	*/